{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\dndle\\\\Desktop\\\\taxcalculator\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Tax from './components/tax_logic.jsx';\n\nfunction App() {\n  _s();\n\n  const [count, setCount] = useState(null);\n  const [taxBracket, setTaxBracket] = useState(null);\n  const [totalEarnings, setTotalEarnings] = useState(null);\n\n  const inputHandler = e => {\n    const rawInputData = e.target.value;\n    taxCalcs(rawInputData * 12);\n    setTotalEarnings(rawInputData.toLocaleString('en-US'));\n  }; // let annualEarnings = '';\n\n\n  const taxCalcs = annualEarnings => {\n    let totalTaxPayment = ''; // Tax Rates Based on 2022 rates.\n    // 18%\n\n    if (annualEarnings > 1 && annualEarnings < 216200) {\n      totalTaxPayment = annualEarnings * 0.18;\n      setTaxBracket(0.18);\n    } // 26%\n\n\n    if (annualEarnings > 216201 && annualEarnings < 337800) {\n      totalTaxPayment = (annualEarnings - 216200) * 0.26 + 38916;\n      setTaxBracket(0.26);\n    } // 31%\n\n\n    if (annualEarnings > 337801 && annualEarnings < 467500) {\n      totalTaxPayment = (annualEarnings - 337800) * 0.31 + 70532;\n      setTaxBracket(0.31);\n    } // 36%\n\n\n    if (annualEarnings > 467501 && annualEarnings < 613600) {\n      totalTaxPayment = annualEarnings - 467500 * 0.36 + 110739;\n      setTaxBracket(0.36);\n    } // 39%\n\n\n    if (annualEarnings > 613601 && annualEarnings < 782200) {\n      totalTaxPayment = annualEarnings - 613600 * 0.39 + 163335;\n      setTaxBracket(0.39);\n    } // 41%\n\n\n    if (annualEarnings > 782201 && annualEarnings < 1656600) {\n      totalTaxPayment = annualEarnings - 782200 * 0.41 + 229089;\n      setTaxBracket(0.41);\n    } // 45%\n\n\n    if (annualEarnings > 1656601) {\n      totalTaxPayment = annualEarnings * 0.45 + 587593;\n      setTaxBracket(0.45);\n    }\n  };\n\n  const yearlyEarning = (totalEarnings * 12).toLocaleString('en-US');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Income Tax Calculator \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tax, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), !count && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Enter Income\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 18\n    }, this), taxBracket && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Your tax bracket is \", taxBracket * 100, \"%, tax needing to be paid per a year is R\", count * 12]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Your take home monthly salary R\", (totalEarnings - totalEarnings * taxBracket).toLocaleString('en-US')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"You pay R\", (totalEarnings * taxBracket).toLocaleString('en-US'), \" in tax per month\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), count && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Annual Earning is R\", yearlyEarning]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: inputHandler,\n        type: \"number\",\n        className: \"todo-input\",\n        placeholder: \"Monthly Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8AQgIXvPQ9sApFNZcqnl2E/jIjc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/dndle/Desktop/taxcalculator/src/App.js"],"names":["React","useState","Tax","App","count","setCount","taxBracket","setTaxBracket","totalEarnings","setTotalEarnings","inputHandler","e","rawInputData","target","value","taxCalcs","toLocaleString","annualEarnings","totalTaxPayment","yearlyEarning"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Tax from './components/tax_logic.jsx';\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(null);\r\n  const [taxBracket, setTaxBracket] = useState(null);\r\n  const [totalEarnings, setTotalEarnings] = useState(null);\r\n\r\n  const inputHandler = (e) => {\r\n    const rawInputData = e.target.value;\r\n    taxCalcs(rawInputData * 12);\r\n    setTotalEarnings(rawInputData.toLocaleString('en-US'));\r\n  };\r\n\r\n  // let annualEarnings = '';\r\n\r\n  const taxCalcs = (annualEarnings) => {\r\n    let totalTaxPayment = '';\r\n    // Tax Rates Based on 2022 rates.\r\n\r\n    // 18%\r\n    if (annualEarnings > 1 && annualEarnings < 216200) {\r\n      totalTaxPayment = annualEarnings * 0.18;\r\n      setTaxBracket(0.18);\r\n    }\r\n    // 26%\r\n    if (annualEarnings > 216201 && annualEarnings < 337800) {\r\n      totalTaxPayment = (annualEarnings - 216200) * 0.26 + 38916;\r\n      setTaxBracket(0.26);\r\n    }\r\n    // 31%\r\n    if (annualEarnings > 337801 && annualEarnings < 467500) {\r\n      totalTaxPayment = (annualEarnings - 337800) * 0.31 + 70532;\r\n      setTaxBracket(0.31);\r\n    }\r\n    // 36%\r\n    if (annualEarnings > 467501 && annualEarnings < 613600) {\r\n      totalTaxPayment = annualEarnings - 467500 * 0.36 + 110739;\r\n      setTaxBracket(0.36);\r\n    }\r\n    // 39%\r\n    if (annualEarnings > 613601 && annualEarnings < 782200) {\r\n      totalTaxPayment = annualEarnings - 613600 * 0.39 + 163335;\r\n      setTaxBracket(0.39);\r\n    }\r\n    // 41%\r\n    if (annualEarnings > 782201 && annualEarnings < 1656600) {\r\n      totalTaxPayment = annualEarnings - 782200 * 0.41 + 229089;\r\n      setTaxBracket(0.41);\r\n    }\r\n    // 45%\r\n    if (annualEarnings > 1656601) {\r\n      totalTaxPayment = annualEarnings * 0.45 + 587593;\r\n      setTaxBracket(0.45);\r\n    }\r\n  };\r\n\r\n  const yearlyEarning = (totalEarnings * 12).toLocaleString('en-US');\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1>Income Tax Calculator </h1>\r\n      </header>\r\n      <Tax />\r\n\r\n      {!count && <h1>Enter Income</h1>}\r\n      {taxBracket && (\r\n        <div>\r\n          <h2>\r\n            Your tax bracket is {taxBracket * 100}%, tax needing to be paid per\r\n            a year is R{count * 12}\r\n          </h2>\r\n          <h2>\r\n            Your take home monthly salary R\r\n            {(totalEarnings - totalEarnings * taxBracket).toLocaleString(\r\n              'en-US'\r\n            )}\r\n          </h2>\r\n          <h2>\r\n            You pay R{(totalEarnings * taxBracket).toLocaleString('en-US')} in\r\n            tax per month\r\n          </h2>\r\n        </div>\r\n      )}\r\n\r\n      {count && <h2>Annual Earning is R{yearlyEarning}</h2>}\r\n      <form>\r\n        <input\r\n          onChange={inputHandler}\r\n          type=\"number\"\r\n          className=\"todo-input\"\r\n          placeholder=\"Monthly Salary\"\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}